
getLocation()
let lat, lon
function getLocation() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(position => {
      lat = position.coords.latitude
      lon = position.coords.longitude
      //‡πÅ‡∏™‡∏î‡∏á lat long ‡πÉ‡∏ô textbox
      document.getElementById("latlong").value = lat + ',' + lon;
    });
  }
}

function validateThaiID(id) {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
  if (id.length !== 13) {
    return false;
  }
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!/^\d{13}$/.test(id)) {
    return false;
  }
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ä‡πá‡∏Ñ‡∏î‡∏¥‡∏à‡∏¥‡∏ï‡∏≠‡∏•
  var sum = 0;
  for (var i = 0; i < 12; i++) {
    sum += parseInt(id.charAt(i)) * (13 - i);
  }
  var checkDigit = (11 - (sum % 11)) % 10;
  // ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏î‡∏¥‡∏à‡∏¥‡∏ï‡∏≠‡∏•
  return parseInt(id.charAt(12)) === checkDigit;
}


function settext() {
  let user = document.getElementById("user").value;
  let datetimeInput = document.getElementById("datetime");
  let datetime = datetimeInput.value ? new Date(datetimeInput.value) : new Date(); // Check if datetime input is empty, if yes, use current date
  let detail = document.getElementById("detail").value;
  let latlong = document.getElementById("latlong").value;
  // Options for Thai locale
  let options = { year: 'numeric', month: 'short', day: 'numeric' };
  // Convert the date to Thai locale
  let thaiDate = datetime.toLocaleDateString('th-TH', options);
  let message = '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏ú‡∏π‡πâ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏≤' + "\n-------------------------" + '\n     ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ( ' + thaiDate + ' )' + "\n" + user + ' ' + detail + "\n ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà: https://maps.google.com?q=" + latlong + '\n   ' + "     ‡∏à‡∏∂‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡∏î‡∏ó‡∏£‡∏≤‡∏ö";
  //alert(`${message}`)
  return message;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• IP
async function getIPFromAPI(userip) {
  try {
    const apiUrl = `http://ip-api.com/json/${userip}`;
    const response = await fetch(apiUrl);

    if (response.ok) {
      const data = await response.json();

      if (data.status === "success") {
        const ipResult = [
          `IP Address: ${data.query}`,
          `üìç‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®: ${data.country} (${data.countryCode})`,
          `üìç‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà: ${data.region} (${data.regionName})`,
          `üìç‡πÄ‡∏°‡∏∑‡∏≠‡∏á: ${data.city}`,
          `üìçTimezone: ${data.timezone}`,
          `üìç‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: ${data.isp}`,
          `üìçOrg: ${data.org}`,
          `üìçAs: ${data.as}`,
          `üìçGoogle Maps: https://maps.google.com?q=${data.lat},${data.lon}`
        ].join('\n');

        return ipResult;
      } else {
        return `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• IP ‡πÑ‡∏î‡πâ: ${data.message}`;
      }
    } else {
      return `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏î‡πâ: Response code ${response.status}`;
    }
  } catch (error) {
    return `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`;
  }
}

